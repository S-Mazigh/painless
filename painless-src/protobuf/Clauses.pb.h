// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clauses.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Clauses_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Clauses_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Clauses_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Clauses_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Clauses_2eproto;
class Clause;
class ClauseDefaultTypeInternal;
extern ClauseDefaultTypeInternal _Clause_default_instance_;
class Clauses;
class ClausesDefaultTypeInternal;
extern ClausesDefaultTypeInternal _Clauses_default_instance_;
class ClausesChunk;
class ClausesChunkDefaultTypeInternal;
extern ClausesChunkDefaultTypeInternal _ClausesChunk_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Clause* Arena::CreateMaybeMessage<::Clause>(Arena*);
template<> ::Clauses* Arena::CreateMaybeMessage<::Clauses>(Arena*);
template<> ::ClausesChunk* Arena::CreateMaybeMessage<::ClausesChunk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Clause PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Clause) */ {
 public:
  inline Clause() : Clause(nullptr) {};
  virtual ~Clause();

  Clause(const Clause& from);
  Clause(Clause&& from) noexcept
    : Clause() {
    *this = ::std::move(from);
  }

  inline Clause& operator=(const Clause& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clause& operator=(Clause&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clause& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clause* internal_default_instance() {
    return reinterpret_cast<const Clause*>(
               &_Clause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Clause& a, Clause& b) {
    a.Swap(&b);
  }
  inline void Swap(Clause* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Clause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clause* New() const final {
    return CreateMaybeMessage<Clause>(nullptr);
  }

  Clause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clause& from);
  void MergeFrom(const Clause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Clause";
  }
  protected:
  explicit Clause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clauses_2eproto);
    return ::descriptor_table_Clauses_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;
  public:
  void clear_literals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_literals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_literals() const;
  void _internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_literals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 literals(int index) const;
  void set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      literals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_literals();

  // @@protoc_insertion_point(class_scope:Clause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > literals_;
  mutable std::atomic<int> _literals_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clauses_2eproto;
};
// -------------------------------------------------------------------

class ClausesChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClausesChunk) */ {
 public:
  inline ClausesChunk() : ClausesChunk(nullptr) {};
  virtual ~ClausesChunk();

  ClausesChunk(const ClausesChunk& from);
  ClausesChunk(ClausesChunk&& from) noexcept
    : ClausesChunk() {
    *this = ::std::move(from);
  }

  inline ClausesChunk& operator=(const ClausesChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClausesChunk& operator=(ClausesChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClausesChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClausesChunk* internal_default_instance() {
    return reinterpret_cast<const ClausesChunk*>(
               &_ClausesChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClausesChunk& a, ClausesChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ClausesChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClausesChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClausesChunk* New() const final {
    return CreateMaybeMessage<ClausesChunk>(nullptr);
  }

  ClausesChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClausesChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClausesChunk& from);
  void MergeFrom(const ClausesChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClausesChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClausesChunk";
  }
  protected:
  explicit ClausesChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clauses_2eproto);
    return ::descriptor_table_Clauses_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClausesFieldNumber = 2,
    kChunkIndexFieldNumber = 1,
  };
  // repeated .Clause clauses = 2;
  int clauses_size() const;
  private:
  int _internal_clauses_size() const;
  public:
  void clear_clauses();
  ::Clause* mutable_clauses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clause >*
      mutable_clauses();
  private:
  const ::Clause& _internal_clauses(int index) const;
  ::Clause* _internal_add_clauses();
  public:
  const ::Clause& clauses(int index) const;
  ::Clause* add_clauses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clause >&
      clauses() const;

  // uint32 chunk_index = 1;
  void clear_chunk_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_index() const;
  void set_chunk_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_index() const;
  void _internal_set_chunk_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClausesChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clause > clauses_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clauses_2eproto;
};
// -------------------------------------------------------------------

class Clauses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Clauses) */ {
 public:
  inline Clauses() : Clauses(nullptr) {};
  virtual ~Clauses();

  Clauses(const Clauses& from);
  Clauses(Clauses&& from) noexcept
    : Clauses() {
    *this = ::std::move(from);
  }

  inline Clauses& operator=(const Clauses& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clauses& operator=(Clauses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clauses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clauses* internal_default_instance() {
    return reinterpret_cast<const Clauses*>(
               &_Clauses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Clauses& a, Clauses& b) {
    a.Swap(&b);
  }
  inline void Swap(Clauses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Clauses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clauses* New() const final {
    return CreateMaybeMessage<Clauses>(nullptr);
  }

  Clauses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clauses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clauses& from);
  void MergeFrom(const Clauses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clauses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Clauses";
  }
  protected:
  explicit Clauses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clauses_2eproto);
    return ::descriptor_table_Clauses_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 3,
    kNumClausesFieldNumber = 1,
    kNumChunksFieldNumber = 2,
  };
  // repeated .ClausesChunk chunks = 3;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::ClausesChunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClausesChunk >*
      mutable_chunks();
  private:
  const ::ClausesChunk& _internal_chunks(int index) const;
  ::ClausesChunk* _internal_add_chunks();
  public:
  const ::ClausesChunk& chunks(int index) const;
  ::ClausesChunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClausesChunk >&
      chunks() const;

  // uint32 num_clauses = 1;
  void clear_num_clauses();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_clauses() const;
  void set_num_clauses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_clauses() const;
  void _internal_set_num_clauses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_chunks = 2;
  void clear_num_chunks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks() const;
  void set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_chunks() const;
  void _internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Clauses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClausesChunk > chunks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_clauses_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clauses_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Clause

// repeated int32 literals = 1;
inline int Clause::_internal_literals_size() const {
  return literals_.size();
}
inline int Clause::literals_size() const {
  return _internal_literals_size();
}
inline void Clause::clear_literals() {
  literals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Clause::_internal_literals(int index) const {
  return literals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Clause::literals(int index) const {
  // @@protoc_insertion_point(field_get:Clause.literals)
  return _internal_literals(index);
}
inline void Clause::set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:Clause.literals)
}
inline void Clause::_internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Add(value);
}
inline void Clause::add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_literals(value);
  // @@protoc_insertion_point(field_add:Clause.literals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Clause::_internal_literals() const {
  return literals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Clause::literals() const {
  // @@protoc_insertion_point(field_list:Clause.literals)
  return _internal_literals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Clause::_internal_mutable_literals() {
  return &literals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Clause::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:Clause.literals)
  return _internal_mutable_literals();
}

// -------------------------------------------------------------------

// ClausesChunk

// uint32 chunk_index = 1;
inline void ClausesChunk::clear_chunk_index() {
  chunk_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClausesChunk::_internal_chunk_index() const {
  return chunk_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClausesChunk::chunk_index() const {
  // @@protoc_insertion_point(field_get:ClausesChunk.chunk_index)
  return _internal_chunk_index();
}
inline void ClausesChunk::_internal_set_chunk_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_index_ = value;
}
inline void ClausesChunk::set_chunk_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_index(value);
  // @@protoc_insertion_point(field_set:ClausesChunk.chunk_index)
}

// repeated .Clause clauses = 2;
inline int ClausesChunk::_internal_clauses_size() const {
  return clauses_.size();
}
inline int ClausesChunk::clauses_size() const {
  return _internal_clauses_size();
}
inline void ClausesChunk::clear_clauses() {
  clauses_.Clear();
}
inline ::Clause* ClausesChunk::mutable_clauses(int index) {
  // @@protoc_insertion_point(field_mutable:ClausesChunk.clauses)
  return clauses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clause >*
ClausesChunk::mutable_clauses() {
  // @@protoc_insertion_point(field_mutable_list:ClausesChunk.clauses)
  return &clauses_;
}
inline const ::Clause& ClausesChunk::_internal_clauses(int index) const {
  return clauses_.Get(index);
}
inline const ::Clause& ClausesChunk::clauses(int index) const {
  // @@protoc_insertion_point(field_get:ClausesChunk.clauses)
  return _internal_clauses(index);
}
inline ::Clause* ClausesChunk::_internal_add_clauses() {
  return clauses_.Add();
}
inline ::Clause* ClausesChunk::add_clauses() {
  // @@protoc_insertion_point(field_add:ClausesChunk.clauses)
  return _internal_add_clauses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clause >&
ClausesChunk::clauses() const {
  // @@protoc_insertion_point(field_list:ClausesChunk.clauses)
  return clauses_;
}

// -------------------------------------------------------------------

// Clauses

// uint32 num_clauses = 1;
inline void Clauses::clear_num_clauses() {
  num_clauses_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Clauses::_internal_num_clauses() const {
  return num_clauses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Clauses::num_clauses() const {
  // @@protoc_insertion_point(field_get:Clauses.num_clauses)
  return _internal_num_clauses();
}
inline void Clauses::_internal_set_num_clauses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_clauses_ = value;
}
inline void Clauses::set_num_clauses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_clauses(value);
  // @@protoc_insertion_point(field_set:Clauses.num_clauses)
}

// uint32 num_chunks = 2;
inline void Clauses::clear_num_chunks() {
  num_chunks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Clauses::_internal_num_chunks() const {
  return num_chunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Clauses::num_chunks() const {
  // @@protoc_insertion_point(field_get:Clauses.num_chunks)
  return _internal_num_chunks();
}
inline void Clauses::_internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_chunks_ = value;
}
inline void Clauses::set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_chunks(value);
  // @@protoc_insertion_point(field_set:Clauses.num_chunks)
}

// repeated .ClausesChunk chunks = 3;
inline int Clauses::_internal_chunks_size() const {
  return chunks_.size();
}
inline int Clauses::chunks_size() const {
  return _internal_chunks_size();
}
inline void Clauses::clear_chunks() {
  chunks_.Clear();
}
inline ::ClausesChunk* Clauses::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:Clauses.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClausesChunk >*
Clauses::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:Clauses.chunks)
  return &chunks_;
}
inline const ::ClausesChunk& Clauses::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::ClausesChunk& Clauses::chunks(int index) const {
  // @@protoc_insertion_point(field_get:Clauses.chunks)
  return _internal_chunks(index);
}
inline ::ClausesChunk* Clauses::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::ClausesChunk* Clauses::add_chunks() {
  // @@protoc_insertion_point(field_add:Clauses.chunks)
  return _internal_add_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClausesChunk >&
Clauses::chunks() const {
  // @@protoc_insertion_point(field_list:Clauses.chunks)
  return chunks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Clauses_2eproto
