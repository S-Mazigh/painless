// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clauses.proto

#include "Clauses.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Clauses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Clause_Clauses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Clauses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClausesChunk_Clauses_2eproto;
class ClauseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Clause> _instance;
} _Clause_default_instance_;
class ClausesChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClausesChunk> _instance;
} _ClausesChunk_default_instance_;
class ClausesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Clauses> _instance;
} _Clauses_default_instance_;
static void InitDefaultsscc_info_Clause_Clauses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Clause_default_instance_;
    new (ptr) ::Clause();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Clause::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Clause_Clauses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Clause_Clauses_2eproto}, {}};

static void InitDefaultsscc_info_Clauses_Clauses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Clauses_default_instance_;
    new (ptr) ::Clauses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Clauses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Clauses_Clauses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Clauses_Clauses_2eproto}, {
      &scc_info_ClausesChunk_Clauses_2eproto.base,}};

static void InitDefaultsscc_info_ClausesChunk_Clauses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClausesChunk_default_instance_;
    new (ptr) ::ClausesChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClausesChunk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClausesChunk_Clauses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClausesChunk_Clauses_2eproto}, {
      &scc_info_Clause_Clauses_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Clauses_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Clauses_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Clauses_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Clauses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Clause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Clause, literals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClausesChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClausesChunk, chunk_index_),
  PROTOBUF_FIELD_OFFSET(::ClausesChunk, clauses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Clauses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Clauses, num_clauses_),
  PROTOBUF_FIELD_OFFSET(::Clauses, num_chunks_),
  PROTOBUF_FIELD_OFFSET(::Clauses, chunks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Clause)},
  { 6, -1, sizeof(::ClausesChunk)},
  { 13, -1, sizeof(::Clauses)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Clause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClausesChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Clauses_default_instance_),
};

const char descriptor_table_protodef_Clauses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rClauses.proto\"\032\n\006Clause\022\020\n\010literals\030\001 "
  "\003(\005\"=\n\014ClausesChunk\022\023\n\013chunk_index\030\001 \001(\r"
  "\022\030\n\007clauses\030\002 \003(\0132\007.Clause\"Q\n\007Clauses\022\023\n"
  "\013num_clauses\030\001 \001(\r\022\022\n\nnum_chunks\030\002 \001(\r\022\035"
  "\n\006chunks\030\003 \003(\0132\r.ClausesChunkb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Clauses_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Clauses_2eproto_sccs[3] = {
  &scc_info_Clause_Clauses_2eproto.base,
  &scc_info_Clauses_Clauses_2eproto.base,
  &scc_info_ClausesChunk_Clauses_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Clauses_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Clauses_2eproto = {
  false, false, descriptor_table_protodef_Clauses_2eproto, "Clauses.proto", 197,
  &descriptor_table_Clauses_2eproto_once, descriptor_table_Clauses_2eproto_sccs, descriptor_table_Clauses_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Clauses_2eproto::offsets,
  file_level_metadata_Clauses_2eproto, 3, file_level_enum_descriptors_Clauses_2eproto, file_level_service_descriptors_Clauses_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Clauses_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Clauses_2eproto)), true);

// ===================================================================

void Clause::InitAsDefaultInstance() {
}
class Clause::_Internal {
 public:
};

Clause::Clause(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  literals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Clause)
}
Clause::Clause(const Clause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      literals_(from.literals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Clause)
}

void Clause::SharedCtor() {
}

Clause::~Clause() {
  // @@protoc_insertion_point(destructor:Clause)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Clause::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Clause::ArenaDtor(void* object) {
  Clause* _this = reinterpret_cast< Clause* >(object);
  (void)_this;
}
void Clause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Clause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Clause& Clause::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Clause_Clauses_2eproto.base);
  return *internal_default_instance();
}


void Clause::Clear() {
// @@protoc_insertion_point(message_clear_start:Clause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  literals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Clause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Clause::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Clause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    int byte_size = _literals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_literals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Clause)
  return target;
}

size_t Clause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Clause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _literals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Clause::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Clause)
  GOOGLE_DCHECK_NE(&from, this);
  const Clause* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Clause>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Clause)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Clause)
    MergeFrom(*source);
  }
}

void Clause::MergeFrom(const Clause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Clause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  literals_.MergeFrom(from.literals_);
}

void Clause::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Clause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clause::CopyFrom(const Clause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Clause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clause::IsInitialized() const {
  return true;
}

void Clause::InternalSwap(Clause* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  literals_.InternalSwap(&other->literals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Clause::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClausesChunk::InitAsDefaultInstance() {
}
class ClausesChunk::_Internal {
 public:
};

ClausesChunk::ClausesChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  clauses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClausesChunk)
}
ClausesChunk::ClausesChunk(const ClausesChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clauses_(from.clauses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_index_ = from.chunk_index_;
  // @@protoc_insertion_point(copy_constructor:ClausesChunk)
}

void ClausesChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClausesChunk_Clauses_2eproto.base);
  chunk_index_ = 0u;
}

ClausesChunk::~ClausesChunk() {
  // @@protoc_insertion_point(destructor:ClausesChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClausesChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClausesChunk::ArenaDtor(void* object) {
  ClausesChunk* _this = reinterpret_cast< ClausesChunk* >(object);
  (void)_this;
}
void ClausesChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClausesChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClausesChunk& ClausesChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClausesChunk_Clauses_2eproto.base);
  return *internal_default_instance();
}


void ClausesChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ClausesChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clauses_.Clear();
  chunk_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClausesChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunk_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Clause clauses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clauses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClausesChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClausesChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunk_index = 1;
  if (this->chunk_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunk_index(), target);
  }

  // repeated .Clause clauses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clauses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_clauses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClausesChunk)
  return target;
}

size_t ClausesChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClausesChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Clause clauses = 2;
  total_size += 1UL * this->_internal_clauses_size();
  for (const auto& msg : this->clauses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 chunk_index = 1;
  if (this->chunk_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClausesChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClausesChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ClausesChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClausesChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClausesChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClausesChunk)
    MergeFrom(*source);
  }
}

void ClausesChunk::MergeFrom(const ClausesChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClausesChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clauses_.MergeFrom(from.clauses_);
  if (from.chunk_index() != 0) {
    _internal_set_chunk_index(from._internal_chunk_index());
  }
}

void ClausesChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClausesChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClausesChunk::CopyFrom(const ClausesChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClausesChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClausesChunk::IsInitialized() const {
  return true;
}

void ClausesChunk::InternalSwap(ClausesChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clauses_.InternalSwap(&other->clauses_);
  swap(chunk_index_, other->chunk_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClausesChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Clauses::InitAsDefaultInstance() {
}
class Clauses::_Internal {
 public:
};

Clauses::Clauses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Clauses)
}
Clauses::Clauses(const Clauses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_clauses_, &from.num_clauses_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_chunks_) -
    reinterpret_cast<char*>(&num_clauses_)) + sizeof(num_chunks_));
  // @@protoc_insertion_point(copy_constructor:Clauses)
}

void Clauses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Clauses_Clauses_2eproto.base);
  ::memset(&num_clauses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_chunks_) -
      reinterpret_cast<char*>(&num_clauses_)) + sizeof(num_chunks_));
}

Clauses::~Clauses() {
  // @@protoc_insertion_point(destructor:Clauses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Clauses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Clauses::ArenaDtor(void* object) {
  Clauses* _this = reinterpret_cast< Clauses* >(object);
  (void)_this;
}
void Clauses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Clauses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Clauses& Clauses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Clauses_Clauses_2eproto.base);
  return *internal_default_instance();
}


void Clauses::Clear() {
// @@protoc_insertion_point(message_clear_start:Clauses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  ::memset(&num_clauses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_chunks_) -
      reinterpret_cast<char*>(&num_clauses_)) + sizeof(num_chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Clauses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_clauses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_clauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ClausesChunk chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Clauses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Clauses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_clauses = 1;
  if (this->num_clauses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_clauses(), target);
  }

  // uint32 num_chunks = 2;
  if (this->num_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_chunks(), target);
  }

  // repeated .ClausesChunk chunks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chunks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Clauses)
  return target;
}

size_t Clauses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Clauses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClausesChunk chunks = 3;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 num_clauses = 1;
  if (this->num_clauses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_clauses());
  }

  // uint32 num_chunks = 2;
  if (this->num_chunks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_chunks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Clauses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Clauses)
  GOOGLE_DCHECK_NE(&from, this);
  const Clauses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Clauses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Clauses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Clauses)
    MergeFrom(*source);
  }
}

void Clauses::MergeFrom(const Clauses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Clauses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  if (from.num_clauses() != 0) {
    _internal_set_num_clauses(from._internal_num_clauses());
  }
  if (from.num_chunks() != 0) {
    _internal_set_num_chunks(from._internal_num_chunks());
  }
}

void Clauses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Clauses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clauses::CopyFrom(const Clauses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Clauses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clauses::IsInitialized() const {
  return true;
}

void Clauses::InternalSwap(Clauses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunks_.InternalSwap(&other->chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Clauses, num_chunks_)
      + sizeof(Clauses::num_chunks_)
      - PROTOBUF_FIELD_OFFSET(Clauses, num_clauses_)>(
          reinterpret_cast<char*>(&num_clauses_),
          reinterpret_cast<char*>(&other->num_clauses_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Clauses::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Clause* Arena::CreateMaybeMessage< ::Clause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Clause >(arena);
}
template<> PROTOBUF_NOINLINE ::ClausesChunk* Arena::CreateMaybeMessage< ::ClausesChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClausesChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Clauses* Arena::CreateMaybeMessage< ::Clauses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Clauses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
